#pragma once
#include "player.hpp"
#include "scr_entref_t.hpp"


struct XAnimTree_s;

struct gameTypeScript_t
{
    char pszScript[64];
    char pszName[64];
    int bTeamBased;
};


struct scr_gametype_data_t
{
    int main;
    int startupgametype;
    int playerconnect;
    int playerdisconnect;
    int playerdamage;
    int playerkilled;
    int votecalled;
    int playervote;
    int playerlaststand;
    int iNumGameTypes;
    gameTypeScript_t list[32];
};


#pragma pack(push, 4)
struct corpseInfo_t
{
    XAnimTree_s* tree;
    int entnum;
    int time;
    clientInfo_t ci;
    byte falling;
    byte pad[3];
};
#pragma pack(pop)


struct scr_data_t
{
    int levelscript;
    int gametypescript;
    scr_gametype_data_t gametype;
    int delete_;
    int initstructs;
    int createstruct;
    corpseInfo_t playerCorpseInfo[8];
    char _padding[100];
};

extern "C"
{
    extern scr_data_t g_scr_data;

    void GScr_CreatePrintChannel();
    void GScr_printChannelSet();
    void print();
    void println();
    void iprintln();
    void iprintlnbold();
    void GScr_line();
    void GScr_SpawnPlane();
    void GScr_SpawnTurret();
    void GScr_PrecacheTurret();
    void assertCmd();
    void assertexCmd();
    void assertmsgCmd();
    void GScr_IsDefined();
    void GScr_IsAlive();
    void GScr_GetTime();
    void Scr_GetEntByNum();
    void Scr_GetWeaponModel();
    void GScr_GetAnimLength();
    void GScr_AnimHasNotetrack();
    void GScr_GetNotetrackTimes();
    void GScr_GetBrushModelCenter();
    void Scr_Objective_Add();
    void Scr_Objective_Delete();
    void Scr_Objective_State();
    void Scr_Objective_Icon();
    void Scr_Objective_Position();
    void Scr_Objective_OnEntity();
    void Scr_Objective_Current();
    void Scr_BulletTrace();
    void Scr_BulletTracePassed();
    void Scr_SightTracePassed();
    void Scr_PhysicsTrace();
    void Scr_PlayerPhysicsTrace();
    void GScr_GetMoveDelta();
    void GScr_GetAngleDelta();
    void GScr_GetNorthYaw();
    void Scr_RandomInt();
    void Scr_RandomFloat();
    void Scr_RandomIntRange();
    void Scr_RandomFloatRange();
    void GScr_sin();
    void GScr_cos();
    void GScr_tan();
    void GScr_asin();
    void GScr_acos();
    void GScr_atan();
    void GScr_CastInt();
    void GScr_abs();
    void GScr_min();
    void GScr_max();
    void GScr_floor();
    void GScr_ceil();
    void GScr_sqrt();
    void GScr_VectorFromLineToPoint();
    void GScr_PointOnSegmentNearestToPoint();
    void GScr_IsWeaponDetonationTimed();
    void Scr_Distance();
    void Scr_Distance2D();
    void Scr_DistanceSquared();
    void Scr_Length();
    void Scr_LengthSquared();
    void Scr_Closer();
    void Scr_VectorDot();
    void Scr_VectorNormalize();
    void Scr_VectorToAngles();
    void Scr_VectorLerp();
    void Scr_AnglesToUp();
    void Scr_AnglesToRight();
    void Scr_AnglesToForward();
    void Scr_CombineAngles();
    void Scr_IsSubStr();
    void Scr_GetSubStr();
    void Scr_ToLower();
    void Scr_StrTok();
    void Scr_MusicPlay();
    void Scr_MusicStop();
    void Scr_SoundFade();
    void Scr_AmbientPlay();
    void Scr_AmbientStop();
    void Scr_PrecacheModel();
    void Scr_PrecacheShellShock();
    void Scr_PrecacheItem();
    void Scr_PrecacheShader();
    void Scr_PrecacheRumble();
    void Scr_LoadFX();
    void Scr_PlayFX();
    void Scr_PlayFXOnTag();
    void Scr_PlayLoopedFX();
    void Scr_SpawnFX();
    void Scr_TriggerFX();
    void Scr_PhysicsExplosionSphere();
    void Scr_PhysicsExplosionCylinder();
    void Scr_PhysicsRadiusJolt();
    void Scr_PhysicsRadiusJitter();
    void Scr_SetExponentialFog();
    void Scr_GrenadeExplosionEffect();
    void GScr_RadiusDamage();
    void GScr_SetPlayerIgnoreRadiusDamage();
    void GScr_GetNumParts();
    void GScr_GetPartName();
    void GScr_Earthquake();
    void GScr_NewTeamHudElem();
    void GScr_WeaponFireTime();
    void GScr_IsWeaponClipOnly();
    void GScr_WeaponClipSize();
    void GScr_WeaponIsSemiAuto();
    void GScr_WeaponIsBoltAction();
    void GScr_WeaponType();
    void GScr_WeaponClass();
    void GScr_WeaponInventoryType();
    void GScr_WeaponStartAmmo();
    void GScr_WeaponMaxAmmo();
    void GScr_WeaponAltWeaponName();
    void GScr_IsPlayer();
    void GScr_IsPlayerNumber();
    void GScr_SetWinningPlayer();
    void GScr_SetWinningTeam();
    void GScr_Announcement();
    void GScr_ClientAnnouncement();
    void GScr_GetTeamScore();
    void GScr_SetTeamScore();
    void GScr_SetClientNameMode();
    void GScr_UpdateClientNames();
    void GScr_GetTeamPlayersAlive();
    void GScr_Objective_Team();
    void GScr_LogPrint();
    void GScr_WorldEntNumber();
    void GScr_Obituary();
    void GScr_positionWouldTelefrag();
    void GScr_getStartTime();
    void GScr_PrecacheMenu();
    void GScr_PrecacheStatusIcon();
    void GScr_PrecacheHeadIcon();
    void GScr_PrecacheLocationSelector();
    void GScr_MapRestart();
    void GScr_ExitLevel();
    void GScr_SetArchive();
    void GScr_AllClientsPrint();
    void GScr_ClientPrint();
    void GScr_MapExists();
    void GScr_IsValidGameType();
    void GScr_MatchEnd();
    void GScr_SetPlayerTeamRank();
    void GScr_SendXboxLiveRanks();
    void GScr_EndXboxLiveLobby();
    void GScr_SetTeamRadar();
    void GScr_GetTeamRadar();
    void GScr_GetAssignedTeam();
    void GScr_SetVoteString();
    void GScr_SetVoteTime();
    void GScr_SetVoteYesCount();
    void GScr_SetVoteNoCount();
    void GScr_FPrintFields();
    void GScr_FGetArg();
    void GScr_LoadMap();
    void Scr_PlayRumbleOnPosition();
    void Scr_PlayRumbleLoopOnPosition();
    void Scr_StopAllRumbles();
    void ScrCmd_SoundExists();
    void Scr_IsSplitscreen();
    void GScr_SetMiniMap();
    void GScr_SetMapCenter();
    void GScr_SetGameEndTime();
    void GScr_GetArrayKeys();
    void GScr_SearchForOnlineGames();
    void GScr_QuitLobby();
    void GScr_QuitParty();
    void GScr_StartParty();
    void GScr_StartPrivateMatch();
    void Scr_VisionSetNaked();
    void Scr_VisionSetNight();
    void Scr_TableLookup();
    void Scr_TableLookupIString();
    void GScr_EndLobby();

    void ScrCmd_attach(scr_entref_t entref);
    void ScrCmd_detach(scr_entref_t entref);
    void ScrCmd_detachAll(scr_entref_t entref);
    void ScrCmd_GetAttachSize(scr_entref_t entref);
    void ScrCmd_GetAttachModelName(scr_entref_t entref);
    void ScrCmd_GetAttachTagName(scr_entref_t entref);
    void ScrCmd_GetAttachIgnoreCollision(scr_entref_t entref);
    void ScrCmd_GetClanId(scr_entref_t entref);
    void ScrCmd_GetClanName(scr_entref_t entref);
    void ScrCmd_hidepart(scr_entref_t entref);
    void ScrCmd_showpart(scr_entref_t entref);
    void ScrCmd_showallparts(scr_entref_t entref);
    void ScrCmd_LinkTo(scr_entref_t entref);
    void ScrCmd_Unlink(scr_entref_t entref);
    void ScrCmd_EnableLinkTo(scr_entref_t entref);
    void ScrCmd_GetOrigin(scr_entref_t entref);
    void ScrCmd_GetEye(scr_entref_t entref);
    void ScrCmd_UseBy(scr_entref_t entref);
    void ScrCmd_IsTouching(scr_entref_t entref);
    void ScrCmd_PlaySound(scr_entref_t entref);
    void ScrCmd_PlaySoundAsMaster(scr_entref_t entref);
    void ScrCmd_PlaySoundToTeam(scr_entref_t entref);
    void ScrCmd_PlaySoundToPlayer(scr_entref_t entref);
    void ScrCmd_PlayLoopSound(scr_entref_t entref);
    void ScrCmd_StopLoopSound(scr_entref_t entref);
    void ScrCmd_PlayRumbleOnEntity(scr_entref_t entref);
    void ScrCmd_PlayRumbleLoopOnEntity(scr_entref_t entref);
    void ScrCmd_StopRumble(scr_entref_t entref);
    void ScrCmd_Delete(scr_entref_t entref);
    void ScrCmd_SetModel(scr_entref_t entref);
    void ScrCmd_GetNormalHealth(scr_entref_t entref);
    void ScrCmd_SetNormalHealth(scr_entref_t entref);
    void ScrCmd_Show(scr_entref_t entref);
    void ScrCmd_Hide(scr_entref_t entref);
    void ScrCmd_LaserOn(scr_entref_t entref);
    void ScrCmd_LaserOff(scr_entref_t entref);
    void ScrCmd_ShowToPlayer(scr_entref_t entref);
    void ScrCmd_SetContents(scr_entref_t entref);
    void ScrCmd_GetStance(scr_entref_t entref);
    void GScr_GetAmmoCount(scr_entref_t entref);
    void Scr_SetStableMissile(scr_entref_t entref);
    void GScr_SetCursorHint(scr_entref_t entref);
    void GScr_SetHintString(scr_entref_t entref);
    void GScr_UseTriggerRequireLookAt(scr_entref_t entref);
    void GScr_ShellShock(scr_entref_t entref);
    void GScr_GetTagOrigin(scr_entref_t entref);
    void GScr_GetTagAngles(scr_entref_t entref);
    void GScr_StopShellShock(scr_entref_t entref);
    void GScr_SetDepthOfField(scr_entref_t entref);
    void GScr_ViewKick(scr_entref_t entref);
    void GScr_LocalToWorldCoords(scr_entref_t entref);
    void GScr_SetRightArc(scr_entref_t entref);
    void GScr_SetLeftArc(scr_entref_t entref);
    void GScr_SetTopArc(scr_entref_t entref);
    void GScr_SetBottomArc(scr_entref_t entref);
    void GScr_EntityRadiusDamage(scr_entref_t entref);
    void GScr_Detonate(scr_entref_t entref);
    void GScr_DamageConeTrace(scr_entref_t entref);
    void GScr_SightConeTrace(scr_entref_t entref);
    void GScr_GetEntityNumber(scr_entref_t entref);
    void GScr_EnableGrenadeTouchDamage(scr_entref_t entref);
    void GScr_DisableGrenadeTouchDamage(scr_entref_t entref);
    void GScr_EnableAimAssist(scr_entref_t entref);
    void GScr_DisableAimAssist(scr_entref_t entref);
    void GScr_PlaceSpawnPoint(scr_entref_t entref);
    void PlayerCmd_UpdateScores(scr_entref_t entref);
    void GScr_SetTeamForTrigger(scr_entref_t entref);
    void GScr_ClientClaimTrigger(scr_entref_t entref);
    void GScr_ClientReleaseTrigger(scr_entref_t entref);
    void GScr_ReleaseClaimedTrigger(scr_entref_t entref);
    void GScr_GetStat(scr_entref_t entref);
    void GScr_SetStat(scr_entref_t entref);
    void GScr_SendLeaderboards(scr_entref_t entref);
    void ScrCmd_SetMoveSpeedScale(scr_entref_t entref);
    void GScr_MissileSetTarget(scr_entref_t entref);
    void GScr_StartRagdoll(scr_entref_t entref);
    void GScr_IsRagdoll(scr_entref_t entref);
    void GScr_GetCorpseAnim(scr_entref_t entref);
    void GScr_IsOnLadder(scr_entref_t entref);
    void GScr_IsMantling(scr_entref_t entref);
    void ScrCmd_ItemWeaponSetAmmo(scr_entref_t entref);
}
