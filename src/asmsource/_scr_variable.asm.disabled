;Imports of scr_variable:
	extern FS_FOpenFileByMode
	extern Hunk_AllocateTempMemoryHigh
	extern FS_Read
	extern FS_FCloseFile
	extern va
	extern Com_Error
	extern DB_FindXAssetHeaderReal
	extern TempMalloc
	extern sprintf
	extern FS_ListFiles
	extern FS_FreeFileList
	extern useFastFile
	extern Com_BeginParseSession
	extern Com_Parse
	extern tolower
	extern SL_GetCanonicalString
	extern TempMemorySetPos
	extern strcpy
	extern Com_EndParseSession
	extern Hunk_ClearTempMemoryHigh
	extern Q_stricmp
	extern Scr_TerminalError
	extern SL_AddRefToString
	extern SL_RemoveRefToString
	extern MT_Free
	extern GetEntityFieldValue
	extern MT_Alloc
	extern Scr_Error
	extern SL_ConvertToString
	extern SL_GetStringLen
	extern SL_GetStringForVector
	extern SL_GetStringOfSize
	extern SL_GetStringForFloat
	extern SL_GetStringForInt
	extern SL_ConvertFromString
	extern VM_CancelNotify
	extern Scr_CancelNotifyList
	extern Scr_MakeArray
	extern Scr_AddArray
	extern Scr_AddConstString
	extern Scr_AddInt
	extern SL_GetString_
	extern SetEntityFieldValue
	extern Scr_GetAnims
	extern XAnimGetAnimDebugName
	extern Z_TryVirtualAllocInternal
	extern qsort
	extern Com_Printf
	extern Z_VirtualFreeInternal
	extern Scr_PrintPrevCodePos
	extern var_typename
	extern MakeVariableExternal
	extern GetNewVariableIndexInternal3
	extern GetVariableIndexInternal
	extern DBG_PrintUInt
	extern GetArrayVariable
	extern AllocVariable
	extern AllocEntity
	extern CopyArray
	extern Scr_EvalVariable
	extern RemoveVariable
	extern RemoveRefToObject
	extern Scr_GetObjectUsage
	extern GetNewVariable
	extern Scr_CastString
	extern Scr_EvalEquality
	extern Scr_UnmatchingTypesError
	extern Scr_CastWeakerPair


;Exports of scr_variable:
	global Scr_EvalOr
	global Scr_EvalAnd
	global Scr_EvalMod
	global Scr_EvalExOr
	global Scr_EvalLess
	global Scr_EvalPlus
	global Scr_EvalMinus
	global Scr_EvalDivide
	global Scr_EvalBoolNot
	global Scr_EvalGreater
	global Scr_EvalMultiply
	global Scr_EvalLessEqual
	global Scr_EvalShiftLeft
	global Scr_EvalInequality
	global Scr_EvalShiftRight
	global Scr_EvalGreaterEqual
	global Scr_EvalBinaryOperator
	global Scr_EvalBoolComplement


SECTION .text



;Scr_EvalAnd(VariableValue*, VariableValue*)
Scr_EvalAnd:
	push ebp
	mov ebp, esp
	mov ecx, [ebp+0x8]
	mov edx, [ebp+0xc]
	cmp dword [ecx+0x4], 0x6
	jz Scr_EvalAnd_10
Scr_EvalAnd_20:
	mov [ebp+0xc], edx
	mov [ebp+0x8], ecx
	pop ebp
	jmp Scr_UnmatchingTypesError
Scr_EvalAnd_10:
	cmp dword [edx+0x4], 0x6
	jnz Scr_EvalAnd_20
	mov eax, [ecx]
	and eax, [edx]
	mov [ecx], eax
	pop ebp
	ret
	nop


;Scr_EvalMod(VariableValue*, VariableValue*)
Scr_EvalMod:
	push ebp
	mov ebp, esp
	push ebx
	mov ecx, [ebp+0x8]
	mov eax, [ebp+0xc]
	cmp dword [ecx+0x4], 0x6
	jz Scr_EvalMod_10
Scr_EvalMod_20:
	mov [ebp+0xc], eax
	mov [ebp+0x8], ecx
	pop ebx
	pop ebp
	jmp Scr_UnmatchingTypesError
Scr_EvalMod_10:
	cmp dword [eax+0x4], 0x6
	jnz Scr_EvalMod_20
	mov edx, [eax]
	test edx, edx
	jz Scr_EvalMod_30
	mov eax, [ecx]
	mov ebx, edx
	cdq
	idiv ebx
	mov [ecx], edx
	pop ebx
	pop ebp
	ret
Scr_EvalMod_30:
	mov dword [ecx], 0x0
	mov dword [ebp+0x8], _cstring_divide_by_0
	pop ebx
	pop ebp
	jmp Scr_Error
	nop

;Scr_EvalExOr(VariableValue*, VariableValue*)
Scr_EvalExOr:
	push ebp
	mov ebp, esp
	mov ecx, [ebp+0x8]
	mov edx, [ebp+0xc]
	cmp dword [ecx+0x4], 0x6
	jz Scr_EvalExOr_10
Scr_EvalExOr_20:
	mov [ebp+0xc], edx
	mov [ebp+0x8], ecx
	pop ebp
	jmp Scr_UnmatchingTypesError
Scr_EvalExOr_10:
	cmp dword [edx+0x4], 0x6
	jnz Scr_EvalExOr_20
	mov eax, [ecx]
	xor eax, [edx]
	mov [ecx], eax
	pop ebp
	ret
	nop


;Scr_EvalLess(VariableValue*, VariableValue*)
Scr_EvalLess:
	push ebp
	mov ebp, esp
	push esi
	push ebx
	mov ebx, [ebp+0x8]
	mov esi, [ebp+0xc]
	mov edx, esi
	mov eax, ebx
	call Scr_CastWeakerPair
	mov eax, [ebx+0x4]
	cmp eax, 0x5
	jz Scr_EvalLess_10
	cmp eax, 0x6
	jz Scr_EvalLess_20
	mov [ebp+0xc], esi
	mov [ebp+0x8], ebx
	pop ebx
	pop esi
	pop ebp
	jmp Scr_UnmatchingTypesError
Scr_EvalLess_10:
	mov dword [ebx+0x4], 0x6
	movss xmm0, dword [esi]
	xor eax, eax
	ucomiss xmm0, [ebx]
	seta al
	mov [ebx], eax
	pop ebx
	pop esi
	pop ebp
	ret
Scr_EvalLess_20:
	mov eax, [ebx]
	cmp eax, [esi]
	setl al
	movzx eax, al
	mov [ebx], eax
	pop ebx
	pop esi
	pop ebp
	ret


;Scr_EvalPlus(VariableValue*, VariableValue*)
Scr_EvalPlus:
	push ebp
	mov ebp, esp
	push edi
	push esi
	push ebx
	sub esp, 0x202c
	mov esi, [ebp+0x8]
	mov edi, [ebp+0xc]
	mov edx, [esi+0x4]
	mov eax, [edi+0x4]
	cmp edx, eax
	jz Scr_EvalPlus_10
	jl Scr_EvalPlus_20
	cmp eax, 0x2
	jz Scr_EvalPlus_30
	cmp eax, 0x5
	jz Scr_EvalPlus_40
Scr_EvalPlus_120:
	mov [esp+0x4], edi
	mov [esp], esi
	call Scr_UnmatchingTypesError
	mov edx, [esi+0x4]
Scr_EvalPlus_10:
	cmp edx, 0x4
	jz Scr_EvalPlus_50
Scr_EvalPlus_200:
	cmp edx, 0x4
	jg Scr_EvalPlus_60
	cmp edx, 0x2
	jz Scr_EvalPlus_70
Scr_EvalPlus_90:
	mov [esp+0x4], edi
	mov [esp], esi
	call Scr_UnmatchingTypesError
Scr_EvalPlus_100:
	add esp, 0x202c
	pop ebx
	pop esi
	pop edi
	pop ebp
	ret
Scr_EvalPlus_60:
	cmp edx, 0x5
	jz Scr_EvalPlus_80
	cmp edx, 0x6
	jnz Scr_EvalPlus_90
	mov eax, [esi]
	add eax, [edi]
	mov [esi], eax
	jmp Scr_EvalPlus_100
Scr_EvalPlus_20:
	cmp edx, 0x2
	jz Scr_EvalPlus_110
	cmp edx, 0x5
	jnz Scr_EvalPlus_120
Scr_EvalPlus_240:
	cmp eax, 0x6
	jnz Scr_EvalPlus_120
	mov dword [edi+0x4], 0x5
	cvtsi2ss xmm0, dword [edi]
	movss [edi], xmm0
	mov edx, [esi+0x4]
	jmp Scr_EvalPlus_10
Scr_EvalPlus_50:
	mov dword [esp+0x4], 0x2
	mov dword [esp], 0x10
	call MT_Alloc
	lea ebx, [eax+0x4]
	mov dword [ebx-0x4], 0x0
	mov edx, [esi]
	mov ecx, [edi]
	movss xmm0, dword [edx]
	addss xmm0, [ecx]
	movss [eax+0x4], xmm0
	mov eax, [esi]
	mov edx, [edi]
	movss xmm0, dword [eax+0x4]
	addss xmm0, [edx+0x4]
	movss [ebx+0x4], xmm0
	mov eax, [esi]
	mov edx, [edi]
	movss xmm0, dword [eax+0x8]
	addss xmm0, [edx+0x8]
	movss [ebx+0x8], xmm0
	mov edx, [esi]
	cmp byte [edx-0x1], 0x0
	jnz Scr_EvalPlus_130
	lea ecx, [edx-0x4]
	movzx eax, word [edx-0x4]
	test ax, ax
	jz Scr_EvalPlus_140
	sub eax, 0x1
	mov [edx-0x4], ax
Scr_EvalPlus_130:
	mov edx, [edi]
	cmp byte [edx-0x1], 0x0
	jnz Scr_EvalPlus_150
	lea ecx, [edx-0x4]
	movzx eax, word [edx-0x4]
	test ax, ax
	jz Scr_EvalPlus_160
	sub eax, 0x1
	mov [edx-0x4], ax
Scr_EvalPlus_150:
	mov [esi], ebx
Scr_EvalPlus_280:
	add esp, 0x202c
	pop ebx
	pop esi
	pop edi
	pop ebp
	ret
Scr_EvalPlus_30:
	cmp edx, 0x5
	jz Scr_EvalPlus_170
	cmp edx, 0x6
	jz Scr_EvalPlus_180
	cmp edx, 0x4
	jz Scr_EvalPlus_190
Scr_EvalPlus_40:
	cmp edx, 0x6
	jnz Scr_EvalPlus_120
	mov dl, 0x5
	mov dword [esi+0x4], 0x5
	cvtsi2ss xmm0, dword [esi]
	movss [esi], xmm0
	jmp Scr_EvalPlus_200
Scr_EvalPlus_80:
	movss xmm0, dword [esi]
	addss xmm0, [edi]
	movss [esi], xmm0
	add esp, 0x202c
	pop ebx
	pop esi
	pop edi
	pop ebp
	ret
Scr_EvalPlus_70:
	mov eax, [esi]
	mov [esp], eax
	call SL_ConvertToString
	mov ebx, eax
	mov eax, [edi]
	mov [esp], eax
	call SL_ConvertToString
	mov [ebp-0x201c], eax
	mov eax, [esi]
	mov [esp], eax
	call SL_GetStringLen
	mov [ebp-0x2020], eax
	mov eax, [edi]
	mov [esp], eax
	call SL_GetStringLen
	mov edx, [ebp-0x2020]
	lea eax, [edx+eax+0x1]
	mov [ebp-0x2024], eax
	cmp eax, 0x2000
	jle Scr_EvalPlus_210
	mov eax, [esi]
	mov [esp], eax
	call SL_RemoveRefToString
	mov eax, [edi]
	mov [esp], eax
	call SL_RemoveRefToString
	mov dword [esi+0x4], 0x0
	mov dword [edi+0x4], 0x0
	mov eax, [ebp-0x201c]
	mov [esp+0x8], eax
	mov [esp+0x4], ebx
	mov dword [esp], _cstring_cannot_concat_s_
	call va
	mov [esp], eax
	call Scr_Error
	jmp Scr_EvalPlus_100
Scr_EvalPlus_110:
	cmp eax, 0x5
	jz Scr_EvalPlus_220
	cmp eax, 0x6
	jz Scr_EvalPlus_230
	cmp eax, 0x4
	jnz Scr_EvalPlus_240
	mov dword [edi+0x4], 0x2
	mov ebx, [edi]
	mov [esp], ebx
	call SL_GetStringForVector
	mov [edi], eax
	cmp byte [ebx-0x1], 0x0
	jz Scr_EvalPlus_250
Scr_EvalPlus_260:
	mov edx, [esi+0x4]
	jmp Scr_EvalPlus_10
Scr_EvalPlus_210:
	mov [esp+0x4], ebx
	lea ebx, [ebp-0x2018]
	mov [esp], ebx
	call strcpy
	mov edx, [ebp-0x201c]
	mov [esp+0x4], edx
	mov edx, [ebp-0x2020]
	lea eax, [ebx+edx]
	mov [esp], eax
	call strcpy
	mov dword [esp+0xc], 0xf
	mov eax, [ebp-0x2024]
	mov [esp+0x8], eax
	mov dword [esp+0x4], 0x0
	mov [esp], ebx
	call SL_GetStringOfSize
	mov ebx, eax
	mov eax, [esi]
	mov [esp], eax
	call SL_RemoveRefToString
	mov eax, [edi]
	mov [esp], eax
	call SL_RemoveRefToString
	mov [esi], ebx
	jmp Scr_EvalPlus_100
Scr_EvalPlus_190:
	mov dword [esi+0x4], 0x2
	mov ebx, [esi]
	mov [esp], ebx
	call SL_GetStringForVector
	mov [esi], eax
	cmp byte [ebx-0x1], 0x0
	jnz Scr_EvalPlus_260
Scr_EvalPlus_250:
	lea edx, [ebx-0x4]
	movzx eax, word [ebx-0x4]
	test ax, ax
	jz Scr_EvalPlus_270
	sub eax, 0x1
	mov [ebx-0x4], ax
	mov edx, [esi+0x4]
	jmp Scr_EvalPlus_10
Scr_EvalPlus_140:
	mov dword [esp+0x4], 0x10
	mov [esp], ecx
	call MT_Free
	jmp Scr_EvalPlus_130
Scr_EvalPlus_160:
	mov dword [esp+0x4], 0x10
	mov [esp], ecx
	call MT_Free
	mov [esi], ebx
	jmp Scr_EvalPlus_280
Scr_EvalPlus_170:
	mov dword [esi+0x4], 0x2
	mov eax, [esi]
	mov [esp], eax
	call SL_GetStringForFloat
	mov [esi], eax
	mov edx, [esi+0x4]
	jmp Scr_EvalPlus_10
Scr_EvalPlus_220:
	mov dword [edi+0x4], 0x2
	mov eax, [edi]
	mov [esp], eax
	call SL_GetStringForFloat
	mov [edi], eax
	mov edx, [esi+0x4]
	jmp Scr_EvalPlus_10
Scr_EvalPlus_230:
	mov dword [edi+0x4], 0x2
	mov eax, [edi]
	mov [esp], eax
	call SL_GetStringForInt
	mov [edi], eax
	mov edx, [esi+0x4]
	jmp Scr_EvalPlus_10
Scr_EvalPlus_180:
	mov dword [esi+0x4], 0x2
	mov eax, [esi]
	mov [esp], eax
	call SL_GetStringForInt
	mov [esi], eax
	mov edx, [esi+0x4]
	jmp Scr_EvalPlus_10
Scr_EvalPlus_270:
	mov dword [esp+0x4], 0x10
	mov [esp], edx
	call MT_Free
	mov edx, [esi+0x4]
	jmp Scr_EvalPlus_10
	nop



;Scr_EvalMinus(VariableValue*, VariableValue*)
Scr_EvalMinus:
	push ebp
	mov ebp, esp
	push edi
	push esi
	push ebx
	sub esp, 0x1c
	mov ebx, [ebp+0x8]
	mov esi, [ebp+0xc]
	mov edx, esi
	mov eax, ebx
	call Scr_CastWeakerPair
	mov eax, [ebx+0x4]
	cmp eax, 0x5
	jz Scr_EvalMinus_10
	cmp eax, 0x6
	jz Scr_EvalMinus_20
	cmp eax, 0x4
	jz Scr_EvalMinus_30
	mov [ebp+0xc], esi
	mov [ebp+0x8], ebx
	add esp, 0x1c
	pop ebx
	pop esi
	pop edi
	pop ebp
	jmp Scr_UnmatchingTypesError
Scr_EvalMinus_10:
	movss xmm0, dword [ebx]
	subss xmm0, [esi]
	movss [ebx], xmm0
	add esp, 0x1c
	pop ebx
	pop esi
	pop edi
	pop ebp
	ret
Scr_EvalMinus_20:
	mov eax, [ebx]
	sub eax, [esi]
	mov [ebx], eax
	add esp, 0x1c
	pop ebx
	pop esi
	pop edi
	pop ebp
	ret
Scr_EvalMinus_30:
	mov dword [esp+0x4], 0x2
	mov dword [esp], 0x10
	call MT_Alloc
	lea edi, [eax+0x4]
	mov dword [edi-0x4], 0x0
	mov edx, [ebx]
	mov ecx, [esi]
	movss xmm0, dword [edx]
	subss xmm0, [ecx]
	movss [eax+0x4], xmm0
	mov eax, [ebx]
	mov edx, [esi]
	movss xmm0, dword [eax+0x4]
	subss xmm0, [edx+0x4]
	movss [edi+0x4], xmm0
	mov eax, [ebx]
	mov edx, [esi]
	movss xmm0, dword [eax+0x8]
	subss xmm0, [edx+0x8]
	movss [edi+0x8], xmm0
	mov edx, [ebx]
	cmp byte [edx-0x1], 0x0
	jnz Scr_EvalMinus_40
	lea ecx, [edx-0x4]
	movzx eax, word [edx-0x4]
	test ax, ax
	jz Scr_EvalMinus_50
	sub eax, 0x1
	mov [edx-0x4], ax
Scr_EvalMinus_40:
	mov edx, [esi]
	cmp byte [edx-0x1], 0x0
	jnz Scr_EvalMinus_60
	lea ecx, [edx-0x4]
	movzx eax, word [edx-0x4]
	test ax, ax
	jz Scr_EvalMinus_70
	sub eax, 0x1
	mov [edx-0x4], ax
Scr_EvalMinus_60:
	mov [ebx], edi
Scr_EvalMinus_80:
	add esp, 0x1c
	pop ebx
	pop esi
	pop edi
	pop ebp
	ret
Scr_EvalMinus_50:
	mov dword [esp+0x4], 0x10
	mov [esp], ecx
	call MT_Free
	jmp Scr_EvalMinus_40
Scr_EvalMinus_70:
	mov dword [esp+0x4], 0x10
	mov [esp], ecx
	call MT_Free
	mov [ebx], edi
	jmp Scr_EvalMinus_80
	nop


;Scr_EvalDivide(VariableValue*, VariableValue*)
Scr_EvalDivide:
	push ebp
	mov ebp, esp
	push edi
	push esi
	push ebx
	sub esp, 0x1c
	mov ebx, [ebp+0x8]
	mov esi, [ebp+0xc]
	mov edx, esi
	mov eax, ebx
	call Scr_CastWeakerPair
	mov eax, [ebx+0x4]
	cmp eax, 0x5
	jz Scr_EvalDivide_10
	cmp eax, 0x6
	jz Scr_EvalDivide_20
	cmp eax, 0x4
	jz Scr_EvalDivide_30
	mov [ebp+0xc], esi
	mov [ebp+0x8], ebx
	add esp, 0x1c
	pop ebx
	pop esi
	pop edi
	pop ebp
	jmp Scr_UnmatchingTypesError
Scr_EvalDivide_10:
	movss xmm1, dword [esi]
	ucomiss xmm1, [_float_0_00000000]
	jp Scr_EvalDivide_40
	jz Scr_EvalDivide_50
Scr_EvalDivide_40:
	movss xmm0, dword [ebx]
	divss xmm0, xmm1
	movss [ebx], xmm0
Scr_EvalDivide_140:
	add esp, 0x1c
	pop ebx
	pop esi
	pop edi
	pop ebp
	ret
Scr_EvalDivide_20:
	mov dword [ebx+0x4], 0x5
	mov eax, [esi]
	test eax, eax
	jz Scr_EvalDivide_50
	cvtsi2ss xmm0, dword [ebx]
	cvtsi2ss xmm1, eax
	divss xmm0, xmm1
	movss [ebx], xmm0
	add esp, 0x1c
	pop ebx
	pop esi
	pop edi
	pop ebp
	ret
Scr_EvalDivide_30:
	mov dword [esp+0x4], 0x2
	mov dword [esp], 0x10
	call MT_Alloc
	lea edi, [eax+0x4]
	mov dword [edi-0x4], 0x0
	mov eax, [esi]
	movss xmm1, dword [eax]
	pxor xmm0, xmm0
	ucomiss xmm1, xmm0
	jp Scr_EvalDivide_60
	jz Scr_EvalDivide_70
Scr_EvalDivide_60:
	ucomiss xmm0, [eax+0x4]
	jp Scr_EvalDivide_80
	jz Scr_EvalDivide_70
Scr_EvalDivide_80:
	ucomiss xmm0, [eax+0x8]
	jnz Scr_EvalDivide_90
	jnp Scr_EvalDivide_70
Scr_EvalDivide_90:
	mov eax, [ebx]
	movss xmm0, dword [eax]
	divss xmm0, xmm1
	movss [edi], xmm0
	mov eax, [ebx]
	mov edx, [esi]
	movss xmm0, dword [eax+0x4]
	divss xmm0, dword [edx+0x4]
	movss [edi+0x4], xmm0
	mov eax, [ebx]
	mov edx, [esi]
	movss xmm0, dword [eax+0x8]
	divss xmm0, dword [edx+0x8]
	movss [edi+0x8], xmm0
	mov edx, [ebx]
	cmp byte [edx-0x1], 0x0
	jnz Scr_EvalDivide_100
	lea ecx, [edx-0x4]
	movzx eax, word [edx-0x4]
	test ax, ax
	jz Scr_EvalDivide_110
	sub eax, 0x1
	mov [edx-0x4], ax
Scr_EvalDivide_100:
	mov edx, [esi]
	cmp byte [edx-0x1], 0x0
	jnz Scr_EvalDivide_120
	lea ecx, [edx-0x4]
	movzx eax, word [edx-0x4]
	test ax, ax
	jz Scr_EvalDivide_130
	sub eax, 0x1
	mov [edx-0x4], ax
Scr_EvalDivide_120:
	mov [ebx], edi
	jmp Scr_EvalDivide_140
Scr_EvalDivide_50:
	mov dword [ebx], 0x0
	mov dword [ebp+0x8], _cstring_divide_by_0
	add esp, 0x1c
	pop ebx
	pop esi
	pop edi
	pop ebp
	jmp Scr_Error
Scr_EvalDivide_70:
	mov dword [edi], 0x0
	mov dword [edi+0x4], 0x0
	mov dword [edi+0x8], 0x0
	mov edx, [ebx]
	cmp byte [edx-0x1], 0x0
	jnz Scr_EvalDivide_150
	lea ecx, [edx-0x4]
	movzx eax, word [edx-0x4]
	test ax, ax
	jz Scr_EvalDivide_160
	sub eax, 0x1
	mov [edx-0x4], ax
Scr_EvalDivide_150:
	mov edx, [esi]
	cmp byte [edx-0x1], 0x0
	jnz Scr_EvalDivide_170
	lea ecx, [edx-0x4]
	movzx eax, word [edx-0x4]
	test ax, ax
	jz Scr_EvalDivide_180
	sub eax, 0x1
	mov [edx-0x4], ax
Scr_EvalDivide_170:
	mov [ebx], edi
Scr_EvalDivide_190:
	mov dword [ebp+0x8], _cstring_divide_by_0
	add esp, 0x1c
	pop ebx
	pop esi
	pop edi
	pop ebp
	jmp Scr_Error
Scr_EvalDivide_180:
	mov dword [esp+0x4], 0x10
	mov [esp], ecx
	call MT_Free
	mov [ebx], edi
	jmp Scr_EvalDivide_190
Scr_EvalDivide_160:
	mov dword [esp+0x4], 0x10
	mov [esp], ecx
	call MT_Free
	jmp Scr_EvalDivide_150
Scr_EvalDivide_110:
	mov dword [esp+0x4], 0x10
	mov [esp], ecx
	call MT_Free
	jmp Scr_EvalDivide_100
Scr_EvalDivide_130:
	mov dword [esp+0x4], 0x10
	mov [esp], ecx
	call MT_Free
	mov [ebx], edi
	jmp Scr_EvalDivide_140


;Scr_EvalBoolNot(VariableValue*)
Scr_EvalBoolNot:
	push ebp
	mov ebp, esp
	push esi
	push ebx
	sub esp, 0x10
	mov esi, [ebp+0x8]
	mov ebx, [esi+0x4]
	cmp ebx, 0x6
	jz Scr_EvalBoolNot_10
	cmp ebx, 0x5
	jz Scr_EvalBoolNot_20
	mov edx, [esi]
	lea eax, [ebx-0x1]
	cmp eax, 0x3
	jbe Scr_EvalBoolNot_30
Scr_EvalBoolNot_70:
	mov dword [esi+0x4], 0x0
	mov eax, [ebx*4+var_typename]
	mov [esp+0x4], eax
	mov dword [esp], _cstring_cannot_cast_s_to
	call va
	mov [esp], eax
	call Scr_Error
Scr_EvalBoolNot_90:
	cmp dword [esi+0x4], 0x6
	jnz Scr_EvalBoolNot_40
	xor eax, eax
	cmp dword [esi], 0x0
	setz al
	mov [esi], eax
Scr_EvalBoolNot_40:
	add esp, 0x10
	pop ebx
	pop esi
	pop ebp
	ret
Scr_EvalBoolNot_30:
	test eax, eax
	jz Scr_EvalBoolNot_50
	cmp eax, 0x2
	jbe Scr_EvalBoolNot_60
	cmp byte [edx-0x1], 0x0
	jnz Scr_EvalBoolNot_70
	lea ecx, [edx-0x4]
	movzx eax, word [edx-0x4]
	test ax, ax
	jz Scr_EvalBoolNot_80
	sub eax, 0x1
	mov [edx-0x4], ax
	jmp Scr_EvalBoolNot_70
Scr_EvalBoolNot_10:
	xor eax, eax
	cmp dword [esi], 0x0
	setnz al
	mov [esi], eax
	jmp Scr_EvalBoolNot_90
Scr_EvalBoolNot_20:
	mov dword [esi+0x4], 0x6
	pxor xmm0, xmm0
	ucomiss xmm0, [esi]
	setnz al
	setp dl
	or al, dl
	movzx eax, al
	mov [esi], eax
	jmp Scr_EvalBoolNot_90
Scr_EvalBoolNot_50:
	mov [esp], edx
	call RemoveRefToObject
	jmp Scr_EvalBoolNot_70
Scr_EvalBoolNot_60:
	mov [esp], edx
	call SL_RemoveRefToString
	jmp Scr_EvalBoolNot_70
Scr_EvalBoolNot_80:
	mov dword [esp+0x4], 0x10
	mov [esp], ecx
	call MT_Free
	jmp Scr_EvalBoolNot_70
	nop


;Scr_EvalGreater(VariableValue*, VariableValue*)
Scr_EvalGreater:
	push ebp
	mov ebp, esp
	push esi
	push ebx
	mov ebx, [ebp+0x8]
	mov esi, [ebp+0xc]
	mov edx, esi
	mov eax, ebx
	call Scr_CastWeakerPair
	mov eax, [ebx+0x4]
	cmp eax, 0x5
	jz Scr_EvalGreater_10
	cmp eax, 0x6
	jz Scr_EvalGreater_20
	mov [ebp+0xc], esi
	mov [ebp+0x8], ebx
	pop ebx
	pop esi
	pop ebp
	jmp Scr_UnmatchingTypesError
Scr_EvalGreater_10:
	mov dword [ebx+0x4], 0x6
	movss xmm0, dword [ebx]
	xor eax, eax
	ucomiss xmm0, [esi]
	seta al
	mov [ebx], eax
	pop ebx
	pop esi
	pop ebp
	ret
Scr_EvalGreater_20:
	mov eax, [ebx]
	cmp eax, [esi]
	setg al
	movzx eax, al
	mov [ebx], eax
	pop ebx
	pop esi
	pop ebp
	ret




;Scr_EvalMultiply(VariableValue*, VariableValue*)
Scr_EvalMultiply:
	push ebp
	mov ebp, esp
	push edi
	push esi
	push ebx
	sub esp, 0x1c
	mov ebx, [ebp+0x8]
	mov esi, [ebp+0xc]
	mov edx, esi
	mov eax, ebx
	call Scr_CastWeakerPair
	mov eax, [ebx+0x4]
	cmp eax, 0x5
	jz Scr_EvalMultiply_10
	cmp eax, 0x6
	jz Scr_EvalMultiply_20
	cmp eax, 0x4
	jz Scr_EvalMultiply_30
	mov [ebp+0xc], esi
	mov [ebp+0x8], ebx
	add esp, 0x1c
	pop ebx
	pop esi
	pop edi
	pop ebp
	jmp Scr_UnmatchingTypesError
Scr_EvalMultiply_10:
	movss xmm0, dword [ebx]
	mulss xmm0, [esi]
	movss [ebx], xmm0
	add esp, 0x1c
	pop ebx
	pop esi
	pop edi
	pop ebp
	ret
Scr_EvalMultiply_20:
	mov eax, [ebx]
	imul eax, [esi]
	mov [ebx], eax
	add esp, 0x1c
	pop ebx
	pop esi
	pop edi
	pop ebp
	ret
Scr_EvalMultiply_30:
	mov dword [esp+0x4], 0x2
	mov dword [esp], 0x10
	call MT_Alloc
	lea edi, [eax+0x4]
	mov dword [edi-0x4], 0x0
	mov edx, [ebx]
	mov ecx, [esi]
	movss xmm0, dword [edx]
	mulss xmm0, [ecx]
	movss [eax+0x4], xmm0
	mov eax, [ebx]
	mov edx, [esi]
	movss xmm0, dword [eax+0x4]
	mulss xmm0, [edx+0x4]
	movss [edi+0x4], xmm0
	mov eax, [ebx]
	mov edx, [esi]
	movss xmm0, dword [eax+0x8]
	mulss xmm0, [edx+0x8]
	movss [edi+0x8], xmm0
	mov edx, [ebx]
	cmp byte [edx-0x1], 0x0
	jnz Scr_EvalMultiply_40
	lea ecx, [edx-0x4]
	movzx eax, word [edx-0x4]
	test ax, ax
	jz Scr_EvalMultiply_50
	sub eax, 0x1
	mov [edx-0x4], ax
Scr_EvalMultiply_40:
	mov edx, [esi]
	cmp byte [edx-0x1], 0x0
	jnz Scr_EvalMultiply_60
	lea ecx, [edx-0x4]
	movzx eax, word [edx-0x4]
	test ax, ax
	jz Scr_EvalMultiply_70
	sub eax, 0x1
	mov [edx-0x4], ax
Scr_EvalMultiply_60:
	mov [ebx], edi
Scr_EvalMultiply_80:
	add esp, 0x1c
	pop ebx
	pop esi
	pop edi
	pop ebp
	ret
Scr_EvalMultiply_50:
	mov dword [esp+0x4], 0x10
	mov [esp], ecx
	call MT_Free
	jmp Scr_EvalMultiply_40
Scr_EvalMultiply_70:
	mov dword [esp+0x4], 0x10
	mov [esp], ecx
	call MT_Free
	mov [ebx], edi
	jmp Scr_EvalMultiply_80



;Scr_EvalLessEqual(VariableValue*, VariableValue*)
Scr_EvalLessEqual:
	push ebp
	mov ebp, esp
	push esi
	push ebx
	sub esp, 0x10
	mov ebx, [ebp+0x8]
	mov esi, [ebp+0xc]
	mov edx, esi
	mov eax, ebx
	call Scr_CastWeakerPair
	mov eax, [ebx+0x4]
	cmp eax, 0x5
	jz Scr_EvalLessEqual_10
	cmp eax, 0x6
	jz Scr_EvalLessEqual_20
	mov [esp+0x4], esi
	mov [esp], ebx
	call Scr_UnmatchingTypesError
	xor eax, eax
	cmp dword [ebx], 0x0
	setz al
	mov [ebx], eax
	add esp, 0x10
	pop ebx
	pop esi
	pop ebp
	ret
Scr_EvalLessEqual_10:
	mov dword [ebx+0x4], 0x6
	movss xmm0, dword [ebx]
	xor eax, eax
	ucomiss xmm0, [esi]
	seta al
	mov [ebx], eax
	xor eax, eax
	cmp dword [ebx], 0x0
	setz al
	mov [ebx], eax
	add esp, 0x10
	pop ebx
	pop esi
	pop ebp
	ret
Scr_EvalLessEqual_20:
	mov eax, [ebx]
	cmp eax, [esi]
	setg al
	movzx eax, al
	mov [ebx], eax
	xor eax, eax
	cmp dword [ebx], 0x0
	setz al
	mov [ebx], eax
	add esp, 0x10
	pop ebx
	pop esi
	pop ebp
	ret


;Scr_EvalShiftLeft(VariableValue*, VariableValue*)
Scr_EvalShiftLeft:
	push ebp
	mov ebp, esp
	mov edx, [ebp+0x8]
	mov eax, [ebp+0xc]
	cmp dword [edx+0x4], 0x6
	jz Scr_EvalShiftLeft_10
Scr_EvalShiftLeft_20:
	mov [ebp+0xc], eax
	mov [ebp+0x8], edx
	pop ebp
	jmp Scr_UnmatchingTypesError
Scr_EvalShiftLeft_10:
	cmp dword [eax+0x4], 0x6
	jnz Scr_EvalShiftLeft_20
	mov ecx, [eax]
	shl dword [edx], cl
	pop ebp
	ret
	nop


;Scr_EvalInequality(VariableValue*, VariableValue*)
Scr_EvalInequality:
	push ebp
	mov ebp, esp
	push ebx
	sub esp, 0x14
	mov ebx, [ebp+0x8]
	mov eax, [ebp+0xc]
	mov [esp+0x4], eax
	mov [esp], ebx
	call Scr_EvalEquality
	xor eax, eax
	cmp dword [ebx], 0x0
	setz al
	mov [ebx], eax
	add esp, 0x14
	pop ebx
	pop ebp
	ret
	nop


;Scr_EvalShiftRight(VariableValue*, VariableValue*)
Scr_EvalShiftRight:
	push ebp
	mov ebp, esp
	mov edx, [ebp+0x8]
	mov eax, [ebp+0xc]
	cmp dword [edx+0x4], 0x6
	jz Scr_EvalShiftRight_10
Scr_EvalShiftRight_20:
	mov [ebp+0xc], eax
	mov [ebp+0x8], edx
	pop ebp
	jmp Scr_UnmatchingTypesError
Scr_EvalShiftRight_10:
	cmp dword [eax+0x4], 0x6
	jnz Scr_EvalShiftRight_20
	mov ecx, [eax]
	sar dword [edx], cl
	pop ebp
	ret
	nop



;Scr_EvalGreaterEqual(VariableValue*, VariableValue*)
Scr_EvalGreaterEqual:
	push ebp
	mov ebp, esp
	push esi
	push ebx
	sub esp, 0x10
	mov ebx, [ebp+0x8]
	mov esi, [ebp+0xc]
	mov edx, esi
	mov eax, ebx
	call Scr_CastWeakerPair
	mov eax, [ebx+0x4]
	cmp eax, 0x5
	jz Scr_EvalGreaterEqual_10
	cmp eax, 0x6
	jz Scr_EvalGreaterEqual_20
	mov [esp+0x4], esi
	mov [esp], ebx
	call Scr_UnmatchingTypesError
	xor eax, eax
	cmp dword [ebx], 0x0
	setz al
	mov [ebx], eax
	add esp, 0x10
	pop ebx
	pop esi
	pop ebp
	ret
Scr_EvalGreaterEqual_10:
	mov dword [ebx+0x4], 0x6
	movss xmm0, dword [esi]
	xor eax, eax
	ucomiss xmm0, [ebx]
	seta al
	mov [ebx], eax
	xor eax, eax
	cmp dword [ebx], 0x0
	setz al
	mov [ebx], eax
	add esp, 0x10
	pop ebx
	pop esi
	pop ebp
	ret
Scr_EvalGreaterEqual_20:
	mov eax, [ebx]
	cmp eax, [esi]
	setl al
	movzx eax, al
	mov [ebx], eax
	xor eax, eax
	cmp dword [ebx], 0x0
	setz al
	mov [ebx], eax
	add esp, 0x10
	pop ebx
	pop esi
	pop ebp
	ret


;Scr_EvalBinaryOperator(int, VariableValue*, VariableValue*)
Scr_EvalBinaryOperator:
	push ebp
	mov ebp, esp
	push esi
	push ebx
	sub esp, 0x10
	mov esi, [ebp+0xc]
	mov ebx, [ebp+0x10]
	mov eax, [ebp+0x8]
	sub eax, 0x66
	cmp eax, 0xf
	ja Scr_EvalBinaryOperator_10
	jmp dword [eax*4+Scr_EvalBinaryOperator_jumptab_0]
Scr_EvalBinaryOperator_270:
	cmp dword [esi+0x4], 0x6
	jnz Scr_EvalBinaryOperator_20
	cmp dword [ebx+0x4], 0x6
	jnz Scr_EvalBinaryOperator_20
	mov edx, [ebx]
	test edx, edx
	jz Scr_EvalBinaryOperator_30
	mov eax, [esi]
	mov ecx, edx
	cdq
	idiv ecx
	mov [esi], edx
Scr_EvalBinaryOperator_10:
	add esp, 0x10
	pop ebx
	pop esi
	pop ebp
	ret
Scr_EvalBinaryOperator_120:
	cmp dword [esi+0x4], 0x6
	jnz Scr_EvalBinaryOperator_20
	cmp dword [ebx+0x4], 0x6
	jz Scr_EvalBinaryOperator_40
Scr_EvalBinaryOperator_20:
	mov [ebp+0xc], ebx
	mov [ebp+0x8], esi
	add esp, 0x10
	pop ebx
	pop esi
	pop ebp
	jmp Scr_UnmatchingTypesError
Scr_EvalBinaryOperator_200:
	mov edx, ebx
	mov eax, esi
	call Scr_CastWeakerPair
	mov eax, [esi+0x4]
	cmp eax, 0x5
	jz Scr_EvalBinaryOperator_50
	cmp eax, 0x6
	jz Scr_EvalBinaryOperator_60
Scr_EvalBinaryOperator_90:
	mov [esp+0x4], ebx
	mov [esp], esi
	call Scr_UnmatchingTypesError
Scr_EvalBinaryOperator_100:
	xor eax, eax
	cmp dword [esi], 0x0
	setz al
	mov [esi], eax
	jmp Scr_EvalBinaryOperator_10
Scr_EvalBinaryOperator_210:
	cmp dword [esi+0x4], 0x6
	jnz Scr_EvalBinaryOperator_20
	cmp dword [ebx+0x4], 0x6
	jnz Scr_EvalBinaryOperator_20
	mov ecx, [ebx]
	shl dword [esi], cl
	jmp Scr_EvalBinaryOperator_10
Scr_EvalBinaryOperator_220:
	cmp dword [esi+0x4], 0x6
	jnz Scr_EvalBinaryOperator_20
	cmp dword [ebx+0x4], 0x6
	jnz Scr_EvalBinaryOperator_20
	mov ecx, [ebx]
	sar dword [esi], cl
	jmp Scr_EvalBinaryOperator_10
Scr_EvalBinaryOperator_230:
	mov [ebp+0xc], ebx
	mov [ebp+0x8], esi
	add esp, 0x10
	pop ebx
	pop esi
	pop ebp
	jmp Scr_EvalPlus
Scr_EvalBinaryOperator_240:
	mov [ebp+0xc], ebx
	mov [ebp+0x8], esi
	add esp, 0x10
	pop ebx
	pop esi
	pop ebp
	jmp Scr_EvalMinus
Scr_EvalBinaryOperator_250:
	mov [ebp+0xc], ebx
	mov [ebp+0x8], esi
	add esp, 0x10
	pop ebx
	pop esi
	pop ebp
	jmp Scr_EvalMultiply
Scr_EvalBinaryOperator_260:
	mov [ebp+0xc], ebx
	mov [ebp+0x8], esi
	add esp, 0x10
	pop ebx
	pop esi
	pop ebp
	jmp Scr_EvalDivide
Scr_EvalBinaryOperator_160:
	mov [esp+0x4], ebx
	mov [esp], esi
	call Scr_EvalEquality
	xor eax, eax
	cmp dword [esi], 0x0
	setz al
	mov [esi], eax
	jmp Scr_EvalBinaryOperator_10
Scr_EvalBinaryOperator_140:
	cmp dword [esi+0x4], 0x6
	jnz Scr_EvalBinaryOperator_20
	cmp dword [ebx+0x4], 0x6
	jnz Scr_EvalBinaryOperator_20
	mov eax, [esi]
	and eax, [ebx]
	mov [esi], eax
	jmp Scr_EvalBinaryOperator_10
Scr_EvalBinaryOperator_150:
	mov [ebp+0xc], ebx
	mov [ebp+0x8], esi
	add esp, 0x10
	pop ebx
	pop esi
	pop ebp
	jmp Scr_EvalEquality
Scr_EvalBinaryOperator_130:
	cmp dword [esi+0x4], 0x6
	jnz Scr_EvalBinaryOperator_20
	cmp dword [ebx+0x4], 0x6
	jnz Scr_EvalBinaryOperator_20
	mov eax, [esi]
	xor eax, [ebx]
	mov [esi], eax
	jmp Scr_EvalBinaryOperator_10
Scr_EvalBinaryOperator_180:
	mov edx, ebx
	mov eax, esi
	call Scr_CastWeakerPair
	mov eax, [esi+0x4]
	cmp eax, 0x5
	jz Scr_EvalBinaryOperator_70
	cmp eax, 0x6
	jnz Scr_EvalBinaryOperator_20
	mov eax, [esi]
	cmp eax, [ebx]
	setg al
	movzx eax, al
	mov [esi], eax
	jmp Scr_EvalBinaryOperator_10
Scr_EvalBinaryOperator_190:
	mov edx, ebx
	mov eax, esi
	call Scr_CastWeakerPair
	mov eax, [esi+0x4]
	cmp eax, 0x5
	jz Scr_EvalBinaryOperator_80
	cmp eax, 0x6
	jnz Scr_EvalBinaryOperator_90
	mov eax, [esi]
	cmp eax, [ebx]
	setg al
	movzx eax, al
	mov [esi], eax
	jmp Scr_EvalBinaryOperator_100
Scr_EvalBinaryOperator_170:
	mov edx, ebx
	mov eax, esi
	call Scr_CastWeakerPair
	mov eax, [esi+0x4]
	cmp eax, 0x5
	jz Scr_EvalBinaryOperator_110
	cmp eax, 0x6
	jnz Scr_EvalBinaryOperator_20
	mov eax, [esi]
	cmp eax, [ebx]
	setl al
	movzx eax, al
	mov [esi], eax
	jmp Scr_EvalBinaryOperator_10
Scr_EvalBinaryOperator_50:
	mov dword [esi+0x4], 0x6
	movss xmm0, dword [ebx]
	xor eax, eax
	ucomiss xmm0, [esi]
	seta al
	mov [esi], eax
	jmp Scr_EvalBinaryOperator_100
Scr_EvalBinaryOperator_110:
	mov dword [esi+0x4], 0x6
	movss xmm0, dword [ebx]
	xor eax, eax
	ucomiss xmm0, [esi]
	seta al
	mov [esi], eax
	jmp Scr_EvalBinaryOperator_10
Scr_EvalBinaryOperator_70:
	mov dword [esi+0x4], 0x6
	movss xmm0, dword [esi]
	xor eax, eax
	ucomiss xmm0, [ebx]
	seta al
	mov [esi], eax
	jmp Scr_EvalBinaryOperator_10
Scr_EvalBinaryOperator_80:
	mov dword [esi+0x4], 0x6
	movss xmm0, dword [esi]
	xor eax, eax
	ucomiss xmm0, [ebx]
	seta al
	mov [esi], eax
	jmp Scr_EvalBinaryOperator_100
Scr_EvalBinaryOperator_60:
	mov eax, [esi]
	cmp eax, [ebx]
	setl al
	movzx eax, al
	mov [esi], eax
	jmp Scr_EvalBinaryOperator_100
Scr_EvalBinaryOperator_40:
	mov eax, [esi]
	or eax, [ebx]
	mov [esi], eax
	jmp Scr_EvalBinaryOperator_10
Scr_EvalBinaryOperator_30:
	mov dword [esi], 0x0
	mov dword [ebp+0x8], _cstring_divide_by_0
	add esp, 0x10
	pop ebx
	pop esi
	pop ebp
	jmp Scr_Error
	nop
	
	
Scr_EvalBinaryOperator_jumptab_0:
	dd Scr_EvalBinaryOperator_120
	dd Scr_EvalBinaryOperator_130
	dd Scr_EvalBinaryOperator_140
	dd Scr_EvalBinaryOperator_150
	dd Scr_EvalBinaryOperator_160
	dd Scr_EvalBinaryOperator_170
	dd Scr_EvalBinaryOperator_180
	dd Scr_EvalBinaryOperator_190
	dd Scr_EvalBinaryOperator_200
	dd Scr_EvalBinaryOperator_210
	dd Scr_EvalBinaryOperator_220
	dd Scr_EvalBinaryOperator_230
	dd Scr_EvalBinaryOperator_240
	dd Scr_EvalBinaryOperator_250
	dd Scr_EvalBinaryOperator_260
	dd Scr_EvalBinaryOperator_270


;Scr_EvalBoolComplement(VariableValue*)
Scr_EvalBoolComplement:
	push ebp
	mov ebp, esp
	push esi
	push ebx
	sub esp, 0x10
	mov ebx, [ebp+0x8]
	mov esi, [ebx+0x4]
	cmp esi, 0x6
	jz Scr_EvalBoolComplement_10
	mov edx, [ebx]
	lea eax, [esi-0x1]
	cmp eax, 0x3
	ja Scr_EvalBoolComplement_20
	test eax, eax
	jz Scr_EvalBoolComplement_30
	cmp eax, 0x2
	jbe Scr_EvalBoolComplement_40
	cmp byte [edx-0x1], 0x0
	jnz Scr_EvalBoolComplement_20
	lea ecx, [edx-0x4]
	movzx eax, word [edx-0x4]
	test ax, ax
	jz Scr_EvalBoolComplement_50
	sub eax, 0x1
	mov [edx-0x4], ax
Scr_EvalBoolComplement_20:
	mov dword [ebx+0x4], 0x0
	mov eax, [esi*4+var_typename]
	mov [esp+0x4], eax
	mov dword [esp], _cstring__cannot_be_appli
	call va
	mov [ebp+0x8], eax
	add esp, 0x10
	pop ebx
	pop esi
	pop ebp
	jmp Scr_Error
Scr_EvalBoolComplement_10:
	not dword [ebx]
	add esp, 0x10
	pop ebx
	pop esi
	pop ebp
	ret
Scr_EvalBoolComplement_40:
	mov [esp], edx
	call SL_RemoveRefToString
	jmp Scr_EvalBoolComplement_20
Scr_EvalBoolComplement_30:
	mov [esp], edx
	call RemoveRefToObject
	jmp Scr_EvalBoolComplement_20
Scr_EvalBoolComplement_50:
	mov dword [esp+0x4], 0x10
	mov [esp], ecx
	call MT_Free
	jmp Scr_EvalBoolComplement_20


;Scr_EvalOr(VariableValue*, VariableValue*)
Scr_EvalOr:
	push ebp
	mov ebp, esp
	mov ecx, [ebp+0x8]
	mov edx, [ebp+0xc]
	cmp dword [ecx+0x4], 0x6
	jz Scr_EvalOr_10
Scr_EvalOr_20:
	mov [ebp+0xc], edx
	mov [ebp+0x8], ecx
	pop ebp
	jmp Scr_UnmatchingTypesError
Scr_EvalOr_10:
	cmp dword [edx+0x4], 0x6
	jnz Scr_EvalOr_20
	mov eax, [ecx]
	or eax, [edx]
	mov [ecx], eax
	pop ebp
	ret
	nop


;Initialized global or static variables of scr_variable:
SECTION .data

;Initialized constant data of scr_variable:
SECTION .rdata


;Zero initialized global or static variables of scr_variable:
SECTION .bss
align   64,db 0


;All cstrings:
SECTION .rdata
align   4,db 0
_cstring_cannot_find_s:		db 15h,"cannot find ",27h,"%s",27h,0
_cstring_keys:		db "keys",0
_cstring_sss:		db "%s/%s.%s",0
_cstring_ss:		db "%s/%s",0
_cstring_float:		db "float",0
_cstring_int:		db "int",0
_cstring_duplicate_key_s_:		db 15h,"duplicate key ",27h,"%s",27h," in ",27h,"%s",27h,0
_cstring_missing_field_na:		db 15h,"missing field name in ",27h,"%s",27h,0
_cstring_string:		db "string",0
_cstring_vector:		db "vector",0
_cstring_unknown_type_s_i:		db 15h,"unknown type ",27h,"%s",27h," in ",27h,"%s",27h,0
_cstring_exceeded_maximum:		db "exceeded maximum number of script variables",0
_cstring_s_is_not_an_arra:		db "%s is not an array",0
_cstring_s_is_not_an_arra1:		db "%s is not an array index",0
_cstring_readonly_array_c:		db "read-only array cannot be changed",0
_cstring_array_index_d_ou:		db "array index %d out of range",0
_cstring_divide_by_0:		db "divide by 0",0
_cstring_cannot_cast_s_to:		db "cannot cast %s to Bool",0
_cstring_cannot_concat_s_:		db "cannot concat ",22h,"%s",22h," and ",22h,"%s",22h," - max string length exceeded",0
_cstring_s_is_not_an_arra2:		db "%s is not an array, string, or vector",0
_cstring_s_is_not_a_strin:		db "%s is not a string index",0
_cstring_s_is_not_a_vecto:		db "%s is not a vector index",0
_cstring_string_index_d_o:		db "string index %d out of range",0
_cstring_vector_index_d_o:		db "vector index %d out of range",0
_cstring_cannot_cast_s_to1:		db "cannot cast %s to string",0
_cstring_type_s_is_not_a_:		db "type %s is not a float",0
_cstring_string_character:		db "string characters cannot be individually changed",0
_cstring_vector_component:		db "vector components cannot be individually changed",0
_cstring_size_cannot_be_a:		db "size cannot be applied to %s",0
_cstring_s_is_not_a_field:		db "%s is not a field object",0
_cstring_:		db "********************************",0ah,0
_cstring_var_usage_d_endo:		db "var usage: %d, endon usage: %d",0ah,0
_cstring_1:		db 0ah,0
_cstring_ent_type_s_count:		db "ent type ",27h,"%s",27h,"... count: %d, var usage: %d",0ah,0
_cstring_cannot_dump_scri:		db "Cannot dump script threads: out of memory",0ah,0
_cstring_count_d_var_usag:		db "count: %d, var usage: %d, endon usage: %d",0ah,0
_cstring_called_from:		db "called from:",0ah,0
_cstring__cannot_be_appli:		db "~ cannot be applied to ",22h,"%s",22h,0
_cstring_pair_s_and_s_has:		db "pair ",27h,"%s",27h," and ",27h,"%s",27h," has unmatching types ",27h,"%s",27h," and ",27h,"%s",27h,0
_cstring_cannot_set_field:		db "cannot set field of %s",0
_cstring_undefined:		db "undefined",0
_cstring_object:		db "object",0
_cstring_localized_string:		db "localized string",0
_cstring_codepos:		db "codepos",0
_cstring_precodepos:		db "precodepos",0
_cstring_function:		db "function",0
_cstring_stack:		db "stack",0
_cstring_animation:		db "animation",0
_cstring_developer_codepo:		db "developer codepos",0
_cstring_include_codepos:		db "include codepos",0
_cstring_thread:		db "thread",0
_cstring_struct:		db "struct",0
_cstring_removed_entity:		db "removed entity",0
_cstring_entity:		db "entity",0
_cstring_array:		db "array",0
_cstring_removed_thread:		db "removed thread",0
_cstring_hudelem:		db "hudelem",0
_cstring_pathnode:		db "pathnode",0
_cstring_vehiclenode:		db "vehiclenode",0



;All constant floats and doubles:
SECTION .rdata
_float_1_00000000:		dd 0x3f800000	; 1
_float_0_00000000:		dd 0x0	; 0
_float_0_00000100:		dd 0x358637bd	; 1e-06

align   16,db 0
_data16_7fffffff:		dd 0x7fffffff, 0x0, 0x0, 0x0	; DQWORD
